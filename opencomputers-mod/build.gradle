plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

version = '2.0.0-SNAPSHOT'
group = 'li.cil.oc2'
archivesBaseName = 'opencomputers'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'official', version: '1.20.1'
    
    runs {
        client {
            workingDirectory project.file('run')
            
            // Set logging properties for better debugging
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            
            mods {
                opencomputers {
                    source sourceSets.main
                }
            }
        }
        
        server {
            workingDirectory project.file('run')
            
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            
            mods {
                opencomputers {
                    source sourceSets.main
                }
            }
        }
        
        gameTestServer {
            workingDirectory project.file('run')
            
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            
            mods {
                opencomputers {
                    source sourceSets.main
                }
            }
        }
        
        data {
            workingDirectory project.file('run')
            
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            
            args '--mod', 'opencomputers', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            
            mods {
                opencomputers {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // LuaJ repository
    maven {
        name = 'Sonatype OSS'
        url = 'https://oss.sonatype.org/content/repositories/releases/'
    }
    mavenCentral()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.20.1-47.3.0'
    
    // LuaJ for Lua VM implementation
    implementation 'org.luaj:luaj-jse:3.0.1'
    
    // Utilities
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    
    // Optional integrations - commented out for clean build
    // compileOnly fg.deobf("mezz.jei:jei-1.20.1-common-api:15.2.0.27")
    // compileOnly fg.deobf("mezz.jei:jei-1.20.1-forge-api:15.2.0.27")
    // runtimeOnly fg.deobf("mezz.jei:jei-1.20.1-forge:15.2.0.27")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "OpenComputers",
                "Specification-Vendor"    : "OpenComputers Team",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "OpenComputers Team",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        maven(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}